// Copyright (c) 2022, 2025 Contributors to the Eclipse Foundation
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

= Jakarta Data: Query by Method Name Extension
:title: Jakarta Data: Query by Method Name Extension
:pdf-theme: ../../theme/jakartaee-theme.yml
:authors:
:email:
:version-label!:
:doctype: book
:license: Apache License v2.0
:inceptionYear: 2022
:source-highlighter: coderay
:toc: left
:toclevels: 3
:sectnumlevels: 4
:setanchors:
:stem:
ifdef::backend-pdf[]
:pagenums:
:numbered:
:title-logo-image: image:jakarta_ee_logo_schooner_color_stacked_default.png[pdfwidth=4.25in,align=right]
endif::[]
:icons: font
ifndef::imagesdir[:imagesdir: images]
ifndef::sourcedir[:sourcedir: ../../main/java]

:sectnums!:
include::chapters/license/license-efsl.adoc[]

:sectnums:

== Introduction

_Query by Method Name_ is a query language suitable for embedding in the names of methods written in Java.
As such, its syntax is limited to the use of legal identifier characters, so the text of a query must contain neither whitespace, nor punctuation characters, nor numeric operators, nor comparison operators.

Jakarta Data 1.0 offers a Query by Method Name facility as an extension to the specification, providing a migration path for existing applications written for repository frameworks which offer similar functionality.

[source,java]
----
@Repository
public interface ProductRepository extends BasicRepository<Product, Long> {

  List<Product> findByName(String name);

  @OrderBy("price")
  List<Product> findByNameLike(String namePattern);

  List<Product> findByNameLikeAndPriceLessThanOrderByPriceDesc(String namePattern, float priceBelow);

}
----

The functionality described here overlaps significantly with both:

- parameter-based automatic query methods, that is, `@Find` and `@Delete`, and
- annotated query methods, that is `@Query` and Jakarta Data Query Language or Jakarta Persistence Query Language.

Therefore, these alternative approaches are strongly preferred for newly-written code.

A Jakarta Data provider is required to support the Query by Method Name extension in Jakarta Data 1.0.

NOTE: A Jakarta Data provider backed by a key-value or wide-column datastore is not required to support Query by Method Name.

WARNING: This functionality is considered deprecated, and the requirement that a provider support the Query by Method Name extension will be removed in a future version of Jakarta Data.

== Query by Method Name

In Query by Method Name, a query is expressed via a set of method naming conventions.

A method name is formed by concatenating, in the following order:

- an _action_, which must be `find`, `delete`, `count`, or `exists`,
- an optional <<Limits,limit>>,
- a optional <<Restrictions,restriction>>, and
- an optional <<Orders,order>>.

=== Limits

A `find` query may have a _limit_, for example, `First` or `First10`. Other actions must not be combined with a limit.

The limit determines the maximum number of records which may be returned by the query. If the query has an order, then the records which are returned are those which occur first after sorting.

=== Restrictions

A _restriction_ specifies the criteria used to filter records. It is formed by concatenating `By` with one or more conditions, delimited by `And` or `Or`, for example, `PriceLessThanAndNameLike`.

Each _condition_ is formed by concatenating, in the following order:

- an attribute name, which may be a compound name, as specified below in <<Persistent Attribute Names in Query by Method Name>>,
- optionally, `IgnoreCase` (for text-typed attributes),
- optionally, `Not`,
- optionally, an operator such as `LessThan` or `Like`.

Absence of an operator implies the equality condition.

The conditions belonging to the restriction determine the parameters of the method, as specified below in <<Query by Method Name Conditions>>.

=== Orders

A `find` query may have an _order_. The _order_ specifies how records must be sorted. It is formed by concatenating `OrderBy` with one or more ordered pairs of an entity attribute name and a direction of sorting, `Asc` or `Desc`. The direction may be omitted if there is only one entity attribute, in which case `Asc` is implied.

The order is lexicographic, that is, ordered pairs occurring earlier take precedence. An ordered pair occurring later is only used to resolve "ties" between records which cannot be unambiguously ordered using only earlier ordered pairs.

If no order is specified, the records are not sorted.

=== Example query methods

The following table displays some examples of legal method signatures.

[cols="40,~"]
|===
| `findByName(String name)` | Find entities by the `name` attribute.
| `findByAgeGreaterThan(int age)` | Find entities where `age` is greater than the specified value.
| `findByAuthorName(String authorName)` | Find entities by the `authorName` attribute of a related entity.
| `findByCategoryNameAndPriceLessThan(String categoryName, double price)` | Find entities by `categoryName` and `price` attributes, applying an `And` condition.
| `findByNameLikeOrderByPriceDescIdAsc` | Find entities by matching the `name` attribute against a pattern, sorting the results by `price` in descending order, and sorting results with the same `price` by the `id` in ascending order.
|===

=== BNF Grammar for Query Methods

The rules for parsing an interpreting a method name are specified by the following grammar.

[source,bnf]
----
query : find | action
find : "find" limit? ignoredText? restriction? order?
action : ("delete" | "count" | "exists") ignoredText? restriction?
restriction : "By" predicate
limit : "First" max?
predicate : condition (("And" | "Or") condition)*
condition : attribute "IgnoreCase"? "Not"? operator?
operator
    : "Contains"
    | "EndsWith"
    | "StartsWith"
    | "LessThan"
    | "LessThanEqual"
    | "GreaterThan"
    | "GreaterThanEqual"
    | "Between"
    | "Like"
    | "In"
    | "Null"
    | "True"
    | "False"
attribute : identifier ("_" identifier)*
identifier : word
max : digit+
order : "OrderBy" (attribute | orderItem+)
orderItem : attribute ("Asc" | "Desc")
----

Quoted names are considered case-sensitive keywords.

.Explanation of the BNF elements
[cols="12,~"]
|===
| Rule name | Explanation

| `query` | May be a `find` query, or a `delete`, `count`, or `exists` operation.
| `find` | A `find` query has an optional limit and optional restriction on records to be retrieved, and optional sorting.
| `action` | Any other kind of operation has only a restriction to a subset of records.
| `restriction` | Restricts the records returned to those which satisfy a predicate
| `limit` | Limits the records retrieved by a `find` query to a hardcoded maximum, such as `First10`.
| `ignoredText`| Optional text that does not contain `By`, `All`, or `First`.
| `predicate` | A filtering criteria, which may include multiple conditions separated by `And` or `Or`.
| `condition` | An attribute of the queried entity and an operator.
| `operator` | An operator belonging to a condition, for example, `Between` or `LessThan`. When absent, equality is implied.
| `attribute` | An entity attribute name, which can include underscores for nested attributes.
| `identifier` | A legal Java identifier, not containing an underscore.
| `max` | A positive whole number.
| `order` | Specifies that results of a `find` query should be sorted lexicographically, with respect to one or more order items.
| `orderItem` | An entity attribute used to sort results, where `Asc` or `Desc` specifies the sorting direction.
|===

=== Query by Method Name Keywords

An implementation of Query by Method Name must support the following types of operation.

.Query by Method Name Actions
[cols="12,~"]
|===
| Action | Description

|`find`
|Returns entity instances representing the records which satisfy the restriction, or representing all records if there is no restriction.

|`delete`
|Deletes every record which satisfy the restriction, or all records if there is no restriction, and returns either no result (`void`) or the number of records deleted.

|`count`
|Returns the number of records which satisfy the restriction, or the total number of records if there is no restriction.

|`exists`
|Returns `true` if at least one record satisfies the restriction or if there is at least one record in the database when there is no restriction.
|===

An implementation of Query by Method Name must support the following keywords.

.Query by Method Name Keywords
[cols="15,~,~"]
|===
| Keyword | Description | Method signature example

|`And`
|The `And` operator requires both conditions to match.
|`findByNameAndYear`

|`Or`
|The `Or` operator requires at least one of the conditions to match.
|`findByNameOrYear`

|`Not`
|Negates the condition that immediately follows the `Not` keyword. When used without a subsequent keyword, means not equal to.
|`findByNameNotLike`

|`First`
|For a query with ordered results, limits the quantity of results to the number following First, or if there is no subsequent number, to a single result.
|`findFirst10By`

|`OrderBy`
|Specify a static sorting order followed by one or more ordered pairings of an entity attribute name and direction (`Asc` or `Desc`). The direction `Asc` can be omitted from the final attribute listed, in which case ascending order is implied for that attribute.
|`findByAgeOrderByHeightDescIdAsc` `findByAgeOrderById`

|`Desc`
|Specify a static sorting order of descending.
|`findByNameOrderByAgeDesc`

|`Asc`
|Specify a static sorting order of ascending.
|`findByNameOrderByAgeAsc`

|===

For relational databases, the logical operator `And` takes precedence over `Or`, meaning that `And` is evaluated on conditions before `Or` when both are specified on the same method. For other database types, the precedence is limited to the capabilities of the database. For example, some graph databases are limited to precedence in traversal order.

NOTE: An implementation of Query by Method Name backed by a document or graph database is not required to support the `First` keyword. A repository method must raise `java.lang.UnsupportedOperationException` or a more specific subclass of the exception if the database does not support this functionality.

=== Query by Method Name Conditions

In addition to equality conditions, Query by Method Name defines the following kinds of condition.

.Query by Method Name Conditions
[cols="15,10,^12,~,~"]
|===
| Keyword | Attribute type | Parameters  | Description | Method signature example

|`Between` | Any sortable type | 2
|Find results where the attribute is between (inclusive of) two given values, with the first value being the inclusive minimum and the second value being the inclusive maximum.
|`findByDateBetween`

|`Contains` | `String` | 1
|Matches string values with the given substring, which can be a pattern.
|`findByProductNameContains`

|`EndsWith` | `String` | 1
|Matches String values with the given ending, which can be a pattern.
|`findByProductNameEndsWith`

|`LessThan` | Any sortable type | 1
|Find results where the attribute is less than the given value
|`findByAgeLessThan`

|`GreaterThan` | Any sortable type | 1
|Find results where the attribute is greater than the given value
|`findByAgeGreaterThan`

|`LessThanEqual` | Any sortable type | 1
|Find results where the attribute is less than or equal to the given value
|`findByAgeLessThanEqual`

|`GreaterThanEqual` | Any sortable type | 1
|Find results where the attribute is greater than or equal to the given value
|`findByAgeGreaterThanEqual`

|`Like` | `String` | 1
|Matches string values against the given pattern.
|`findByTitleLike`

|`IgnoreCase` | `String` |
|Requests that string values be compared independent of case for query conditions and ordering.
|`findByStreetNameIgnoreCaseLike`

|`In` | Any type | 1 `Set`
|Find results where the attribute is one of the values that are contained within the given `Set`.
|`findByIdIn`

|`Null` | Any type | 0
|Finds results where the attribute has a null value.
|`findByYearRetiredNull`

|`StartsWith` | `String` | 1
|Matches String values with the given beginning, which can be a pattern.
|`findByFirstNameStartsWith`

|`True` | `Boolean` or `boolean` | 0
|Finds results where the attribute has a boolean value of `true`.
|`findBySalariedTrue`

|`False` | `Boolean` or `boolean` | 0
|Finds results where the attribute has a boolean value of `false`.
|`findByCompletedFalse`

|===

Most _Query by Method Name_ conditions require a single repository method parameter. The `Between` condition requires two parameters. `Null`, `True`, and `False` require none. An `In` condition requires a parameter of type `Set<T>` where `T` is the type of the entity attribute. The repository method parameters used for _Query by Method Name_ conditions follow the order in which the _Query by Method Name_ conditions appear within the method name.

Wildcard characters for patterns are determined by the data store. For relational databases, `_` matches any one character and `%` matches zero or more characters.

NOTE: An implementation of Query by Method Name backed by a document or graph database is not required to support `Contains`, `EndsWith`, `StartsWith`, `Like`, `IgnoreCase`, `In`, or `Null`. A repository method must raise `java.lang.UnsupportedOperationException` or a more specific subclass of the exception if the database does not provide the requested functionality.

In the following example the value of the first parameter, `namePattern`, is used for `NameLike`, the values of the second and third parameters, `minYear` and `maxYear`, are used for `YearMadeBetween`, and the value of the fourth parameter, `maxPrice`, is used for `PriceLessThan`.

[source,java]
----
List<Product> findByNameLikeAndYearMadeBetweenAndPriceLessThan(String namePattern,
                                                               int minYear,
                                                               int maxYear,
                                                               float maxPrice,
                                                               Limit limit,
                                                               Order<Product> sortBy)
----

[WARNING]
====
When using NoSQL databases, support for the listed method conditions may vary significantly:

- **Textual Conditions**: Operators such as `Contains`, `EndsWith`, `IgnoreCase`, `Like`, and `StartsWith` depend on text processing capabilities, which are not guaranteed in NoSQL databases. The ability to handle these operations varies widely and depends on the database's support for text-based queries.

- **Null Conditions**: Handling of `Null` values differs across NoSQL databases. In schemaless databases, a field's absence is often treated as non-existent rather than `Null`. This distinction can affect query behavior, as some databases may not support `Null` checks or may interpret them differently. The specification does not define how `Null` and non-existent fields are handled, as this behavior is database-specific.

- **Key-Value Databases**: These databases typically only support the `=` (equals) condition, where the attribute is the key. The key attribute is generally defined by annotations like `jakarta.nosql.Id`.

- **Wide-Column Databases**: These databases might not support conditions on attributes other than the key. When they support such operations, the attribute may need to be configured as a secondary index for compatibility. Handling of `Null` values may vary, as some wide-column stores may treat missing columns as `Null`, while others may not store the column at all.

- **Document and Graph Databases**: These databases are generally more feature-rich and are expected to support most of the conditions described above. However, exceptions exist for text-based conditions (`Contains`, `EndsWith`, etc.), which may still depend on the database's specific capabilities. Similarly, handling of `Null` values in these databases may vary, especially when dealing with omitted fields versus explicitly set `Null` values.

Developers are encouraged to consult the documentation of their chosen NoSQL database provider to confirm the supported operations and clarify the behavior of `Null` versus non-existent fields.
====

=== Return Types

The return type of a Query by Method Name is determined as indicated in the following table, where `E` is the queried entity type.

.Repository Method Return Types
[cols="25,20,~"]
|===
| Operation | Return type | Notes

| `count` | `long` |
| `delete`| `void`,`long`,`int` |
| `exists`| `boolean` |
| `find` | `E` or `Optional<E>` | For queries returning a single item (or none)
| `find` | `E[]` or `List<E>`| For queries where it is possible to return more than one item
| `find` | `Stream<E>` | The caller must call `java.util.stream.BaseStream.close()` for every stream returned by the repository method
| `find` accepting a `PageRequest` | `Page<E>` or `CursoredPage<E>` | For use with pagination
|===


=== Persistent Attribute Names in Query by Method Name

Section 3.2 of the Jakarta Data specification describes how names are assigned to persistent attributes of an entity.

For Query by Method Name, the use of delimiters within a compound name is optional. Delimiters may be omitted entirely from a compound name when they are not needed to disambiguate the persistent attribute to which the name refers. But for a given name, delimiter usage must be consistent: either the delimiter must be used between every pair of persistent attribute names within the compound name, or it must not occur within the compound name.

Resolution of a persistent attribute involves the following steps:

1. A persistent attribute name is extracted from the method name according to the <<BNF Grammar for Query Methods>>. For example, if the query method name is `findByAddressZipCode`, the extracted attribute name is `AddressZipCode`.

2. The extracted name is matched against the attributes of the entity class. If the name assigned to a persistent attribute of the entity class matches the extracted name, ignoring case, then the extracted name resolves to that attribute.

3. Otherwise, if no match is found among the attributes of the entity, the extracted name is matched against the attributes of entity classes and embedded classes reachable from the entity class, interpreting the extracted name as a compound name, as outlined in the previous section, both with and without the optional delimiter. If the compound name assigned to a persistent attribute matches the extracted name, also interpreted as a compound name, and ignoring case, then the extracted name resolves to that attribute.

4. If no matching persistent attribute is found in either of the previous steps, the provider is permitted to reject the query method or to throw `UnsupportedOperationException` when the method is called.

A persistent attribute name used in a _Query by Method Name_ must not contain a keyword reserved by the <<BNF Grammar for Query Methods,grammar>>.

==== Scenario 1: Person Repository with Unambiguous Resolution

In this scenario, we have the following data model:

[source,java]
----
class Person {
  private Long id;
  private MailingAddress address;
}

class MailingAddress {
  private int zipcode;
}
----

The `Person` entity does not have an `addressZipCode` attribute, so use of the delimiter is optional. It is valid to write both of the following repository methods, which have the same meaning,

[source,java]
----
List<Person> findByAddressZipCode(int zipCode);
List<Person> findByAddress_zipcode(int zipCode);
----

==== Scenario 2: Customer Repository with Resolution that requires a Delimiter

In this scenario, we have the following data model:

[source,java]
----
class Customer {
  private Long id;
  private String addressZipCode;
  private MailingAddress address;
}

class MailingAddress {
  private int zipcode;
}
----

The `Customer` entity has an `addressZipCode` attribute, as well as an `address` attribute for an embeddable class with a `zipcode` attribute. The method name `findByAddressZipCode` points to the `addressZipCode` attribute and cannot be used to navigate to the embedded class. To navigate to the `zipcode` attribute of the embedded class, the delimiter must be used:

[source,java]
----
List<Customer> findByAddress_zipcode(int zipCode);
----